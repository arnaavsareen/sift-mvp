services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend.Dockerfile
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./data/models:/app/data/models
      - ./data/screenshots:/app/data/screenshots
      - ./data/videos:/app/data/videos
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./app.db}
      - MODEL_PATH=/app/data/models/yolov8m.pt
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.15}
      # Important for WebSocket connections
      - WS_URL=ws://localhost:${BACKEND_PORT:-8000}/ws
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: deployment/docker/frontend.Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - ./deployment/nginx/default_test.conf:/etc/nginx/conf.d/default.conf
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_WS_URL=ws://localhost/ws
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database service
  db:
    image: postgres:13-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-sift}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  hls_temp: