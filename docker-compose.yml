# services:
#   # Backend service
#   backend:
#     build:
#       context: .
#       dockerfile: deployment/docker/backend.Dockerfile
#     ports:
#       - "${BACKEND_PORT}:8000"
#     volumes:
#       - ./data:/app/data
#     env_file:
#       - backend/.env
#     environment:
#       - DATABASE_URL=${DATABASE_URL}
#     depends_on:
#       - db
#     restart: unless-stopped

#   # Frontend service
#   frontend:
#     build:
#       context: .
#       dockerfile: deployment/docker/frontend.Dockerfile
#     ports:
#       - "${FRONTEND_PORT}:3000"
#     env_file:
#       - frontend/.env
#     environment:
#       - REACT_APP_API_URL=${REACT_APP_API_URL}
#     depends_on:
#       - backend
#     restart: unless-stopped

#   # Database service
#   db:
#     image: postgres:13-alpine
#     ports:
#       - "${POSTGRES_PORT}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#       - POSTGRES_DB=${POSTGRES_DB}
#     restart: unless-stopped

# volumes:
#   postgres_data:

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend.Dockerfile
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./data:/app/data
      # Make sure the model is mounted correctly
      - ./data/models/yolo11m.pt:/app/data/models/yolo11m.pt
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./app.db}
      - MODEL_PATH=/app/data/models/yolo11m.pt
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.15}
    depends_on:
      - db
    restart: unless-stopped
    # Allocate more resources for model inference
    deploy:
      resources:
        limits:
          memory: 8G  # Increased from 4G for better performance with multiple streams
          cpus: '4'   # Limit to 4 CPUs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: deployment/docker/frontend.Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}  # Add WebSocket URL
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database service
  db:
    image: postgres:13-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-sift}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: